Index: src/main/java/ShakeShackBurgerApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.text.SimpleDateFormat;\r\nimport java.util.*;\r\n\r\npublic class ShakeShackBurgerApplication {\r\n\tprivate static MenuContext menuContext;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tmenuContext = new MenuContext();\r\n\t\tdisplayMainMenu();\r\n\t}\r\n\r\n\tprivate static void displayMainMenu() {\r\n\t\tSystem.out.println(\"SHAKESHACK BURGER 에 오신걸 환영합니다.\");\r\n\t\tSystem.out.println(\"아래 메뉴판을 보시고 메뉴를 골라 입력해주세요.\\n\");\r\n\t\t// 메인 페이지에서 0번 관리자 페이지인거 명시 안함.\r\n\r\n\t\tSystem.out.println(\"[ SHAKESHACK MENU ]\");\r\n\t\tList<Menu> mainMenus = menuContext.getMenus(\"Main\");\r\n\t\tint nextNum = printMenu(mainMenus, 1);\r\n\r\n\t\tSystem.out.println(\"[ ORDER MENU ]\");\r\n\t\tList<Menu> orderMenus = menuContext.getMenus(\"Order\");\r\n\t\tprintMenu(orderMenus, nextNum);\r\n\r\n\t\thandleMainMenuInput();\r\n\t}\r\n\r\n\tprivate static int printMenu(List<Menu> menus, int num) {\r\n\t\tfor (int i=0; i<menus.size(); i++) {\r\n\t\t\tSystem.out.println(num++ + \". \" + menus.get(i).name + \"   | \" + menus.get(i).description);\r\n\t\t}\r\n\t\treturn num;\r\n\t}\r\n\r\n\tprivate static void handleMainMenuInput() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint input = scanner.nextInt();\r\n\t\tswitch (input) {\r\n\t\t\tcase 0: // 메인페이지에서 0번 관리자 페이지인거 명시 안함.\r\n\t\t\t\tdisplayAdminMenu();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdisplayBurgersMenu();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdisplayFrozenCustardMenu();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdisplayDrinksMenu();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tdisplayBeerMenu();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tdisplayOrderMenu();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\thandleCancelMenuInput();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\t\thandleMainMenuInput();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// 관리자 페이지 로드\r\n\tprivate static void displayAdminMenu() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\r\n\t\tSystem.out.println(\"이곳은 관리자 페이지입니다.\");\r\n\r\n\t\tSystem.out.println(\"1. 대기주문 목록\");\r\n\t\tSystem.out.println(\"2. 완료주문 목록\");\r\n\t\tSystem.out.println(\"3. 상품 생성\");\r\n\t\tSystem.out.println(\"4. 상품 삭제\");\r\n\t\tSystem.out.println(\"항목을 선택하세요: \");\r\n\r\n\t\tint input = scanner.nextInt();\r\n\t\tswitch (input) {\r\n\t\t\tcase 1:\r\n\t\t\t\tdisplayWaitingOrder();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tprintCompletedOrder();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tcreateItem();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tdeleteItem();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\t\tdisplayAdminMenu();\r\n\t\t\t\tbreak;\r\n\t\t}// switch() of the end\r\n\t}// displayAdminMenu() of the end\r\n\r\n\t// 모든 주문 상세 출력\r\n\tprivate static void printOrders(List<Order> orders) {\r\n\t\tfor (int i=0; i<orders.size(); i++) {\r\n\t\t\tprintOrder(orders.get(i),i);\r\n\t\t\tSystem.out.println();\r\n\t\t}// for() of the end\r\n\t}// printOrders() of the end\r\n\r\n\t// 선택한 주문 내역 출력\r\n\tprivate static void printOrder(Order selectedOrder, int input) {\r\n\t\tint num = selectedOrder.getOrderNum();\r\n\t\tSystem.out.println(\"대기 번호 : \" + num);\r\n\t\tSystem.out.println(\"주문 상품 목록 : \");\r\n\t\tprintMenuItems(selectedOrder.orderItems);\r\n\t\tSystem.out.println(\"주문 총 가격 : \" + selectedOrder.getTotalPrice());\r\n\t\tSystem.out.println(\"요청 사항: \" + selectedOrder.getRequestContent());\r\n\r\n\t\t// 날짜는 ISO 8601 형식으로 ex)2016-10-27T17:13:40+00:00\r\n\t\tDate date = selectedOrder.getOrderDate();\r\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss:XXX\");\r\n\t\tsdf.setTimeZone(TimeZone.getTimeZone(\"Asia/Seoul\"));\r\n\t\tString dateString = sdf.format(date);\r\n\t\tSystem.out.println(\"주문 일시: \" + dateString);\r\n\t}// printOrder() of the end\r\n\r\n\r\n\r\n\t// 1. 대기 중인 주문 조회 및 완료 화면\r\n\tprivate static void displayWaitingOrder() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tSystem.out.println(\"========================================\");\r\n\t\tSystem.out.println(\"대기 중인 주문 목록입니다.\\n\");\r\n\r\n\t\tSystem.out.println(\"[ 대기 주문 목록 ]\");\r\n\t\tList<Order> waitingOrders = menuContext.getWaitingOrders();\r\n\t\tif(waitingOrders.isEmpty()){\r\n\t\t\tSystem.out.println(\"대기 중인 주문이 없습니다.\");\r\n\t\t\tSystem.out.println(\"========================================\");\r\n\t\t\tdisplayMainMenu();\r\n\t\t}else {\r\n\t\t\tprintOrders(waitingOrders);\r\n\r\n\t\t\tSystem.out.println(\"완료할 주문 대기 번호를 입력해주세요.\");\r\n\t\t\thandleWaitingOrders(waitingOrders); // 주문 완료 처리할 메서드\r\n\t\t}\r\n\t}\r\n\r\n\t// 주문 완료 처리할 메서드\r\n\tprivate static void handleWaitingOrders(List<Order> orders) {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint input = scanner.nextInt();\r\n\r\n\t\tif (input >= 1 && input <= orders.size()) {\r\n\t\t\tinput--;\r\n\t\t\tfor(Order order : orders){\r\n\t\t\t\tif(order.getOrderNum()==input){\r\n\t\t\t\t\tOrder selectedOrder = orders.get(input);\r\n\t\t\t\t\tconfirmCompleteOrder(selectedOrder,input);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\thandleWaitingOrders(orders);\r\n\t\t}// if~else() of the end\r\n\t}// handleWaitingOrders() of the end\r\n\r\n\t// 주문 완료 처리\r\n\tprivate static void confirmCompleteOrder(Order selectedOrder, int input) {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tSystem.out.println(\"아래 주문을 완료 처리 하시겠습니까?\\n\");\r\n\t\t//if(menuContext.getWaitingOrders().contains(selectedOrder)) {\r\n\t\t\tprintOrder(selectedOrder, selectedOrder.getOrderNum());\r\n\t\t//}\r\n\r\n\t\tSystem.out.println(\"1. 완료      2. 메뉴판\");\r\n\t\tint confirm = scanner.nextInt();\r\n\t\tif(confirm==1){\r\n\t\t\t//menuContext.addToCompleteOrder(selectedOrder);\r\n\t\t\tsetCompleteOrder(selectedOrder); // 주문 완료 리스트에 넣기\r\n\t\t\tresetWaitingOrder(selectedOrder); // 대기 주문 리스트에서 빼기\r\n\t\t\tSystem.out.println(\"해당 주문을 완료 처리 하였습니다.\");\r\n\t\t\tSystem.out.println(\"========================================\");\r\n\t\t\tdisplayMainMenu();\r\n\t\t}else if(confirm==2){\r\n\t\t\tSystem.out.println(\"========================================\");\r\n\t\t\tdisplayMainMenu();\r\n\t\t}else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다.\");\r\n\t\t\tconfirmCompleteOrder(selectedOrder,input);\r\n\t\t}// if~else() of the end\r\n\t}// completeOrder() of the end\r\n\r\n\t// 주문 완료 리스트에 넣기\r\n\tprivate static void setCompleteOrder(Order selectedOrder) {\r\n\t\tOrder order = new Order();\r\n\t\tDate now = new Date();\r\n\r\n\t\t// List의 깊은 복사\r\n\t\tList<Item> it = new ArrayList<>();\r\n\t\tfor(Item its : selectedOrder.getOrderItems()){\r\n\t\t\tit.add(its);\r\n\t\t}\r\n\r\n\t\torder.setOrderItems(it);\r\n\t\torder.setTotalPrice(selectedOrder.getTotalPrice());\r\n\t\torder.setRequestContent(selectedOrder.getRequestContent());\r\n\t\torder.setOrderDate(selectedOrder.getOrderDate()); // 주문 일시\r\n\t\torder.setCompleteDate(now); // 완료 주문 일시\r\n\t\torder.setOrderNum(selectedOrder.OrderNum);\r\n\t\tmenuContext.addToCompleteOrder(order);\r\n\t}// setCompleteOrder() of the end\r\n\r\n\t// 주문 완료 처리된 주문은 대기 리스트에서 제외\r\n\tprivate static void resetWaitingOrder(Order selectedOrder) {\r\n\t\tmenuContext.getWaitingOrders().remove(selectedOrder);\r\n\t}// resetWaitingOrder() of the end\r\n\r\n\r\n\t// 2. 주문 완료 목록 출력\r\n\tprivate static void printCompletedOrder() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\t\r\n\t\tSystem.out.println(\"========================================\");\r\n\t\tSystem.out.println(\"처리 완료된 주문 목록입니다.\\n\");\r\n\r\n\t\tSystem.out.println(\"[ 완료 주문 목록 ]\");\r\n\t\tprintOrders(menuContext.getCompletedOrders());\r\n\t\tSystem.out.println(\"========================================\");\r\n\r\n\t\tSystem.out.println(\"1. 메뉴판\");\r\n\t\tint input = scanner.nextInt();\r\n\t\tif(input==1){\r\n\t\t\tSystem.out.println(\"========================================\");\r\n\t\t\tdisplayMainMenu();\r\n\t\t}else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다.\");\r\n\t\t\tSystem.out.println(\"========================================\");\r\n\t\t\tprintCompletedOrder();\r\n\t\t}// if~else() of the end\r\n\t}// printCompletedOrder() of the end\r\n\r\n\t// 3. 상품 삭제\r\n\tprivate static void deleteItem() {\r\n\r\n\t\tdisplayMainMenu();\r\n\t}\r\n\r\n\t// 4. 상품 생성\r\n\tprivate static void createItem() {\r\n\r\n\t\tdisplayMainMenu();\r\n\t}\r\n\r\n\r\n\r\n\r\n\tprivate static void displayBurgersMenu() {\r\n\t\tSystem.out.println(\"SHAKESHACK BURGER 에 오신걸 환영합니다.\");\r\n\t\tSystem.out.println(\"아래 상품메뉴판을 보시고 상품을 골라 입력해주세요.\\n\");\r\n\r\n\t\tSystem.out.println(\"[ Burgers MENU ]\");\r\n\t\tList<Item> burgerItems = menuContext.getMenuItems(\"Burgers\");\r\n\t\tprintMenuItems(burgerItems);\r\n\r\n\t\thandleMenuItemInput(burgerItems);\r\n\t}\r\n\r\n\tprivate static void handleMenuItemInput(List<Item> items) {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint input = scanner.nextInt();\r\n\t\tif (input > 0 && input <= items.size()) {\r\n\t\t\tinput--;\r\n\t\t\tItem selectedItem = items.get(input);\r\n\t\t\tdisplayConfirmation(selectedItem);\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\thandleMenuItemInput(items);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void printMenuItems(List<Item> items) {\r\n\t\tfor (int i=0; i<items.size(); i++) {\r\n\t\t\tint num = i + 1;\r\n\t\t\tSystem.out.println(num + \". \" + items.get(i).name + \"   | \" + items.get(i).price + \" | \" + items.get(i).description);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void displayFrozenCustardMenu() {\r\n\t\tSystem.out.println(\"SHAKESHACK BURGER 에 오신걸 환영합니다.\");\r\n\t\tSystem.out.println(\"아래 상품메뉴판을 보시고 상품을 골라 입력해주세요.\\n\");\r\n\r\n\t\tSystem.out.println(\"[ Frozen Custard MENU ]\");\r\n\t\tList<Item> frozenCustardItems = menuContext.getMenuItems(\"Frozen Custard\");\r\n\t\tprintMenuItems(frozenCustardItems);\r\n\r\n\t\thandleMenuItemInput(frozenCustardItems);\r\n\t}\r\n\r\n\tprivate static void displayDrinksMenu() {\r\n\t\tSystem.out.println(\"SHAKESHACK BURGER 에 오신걸 환영합니다.\");\r\n\t\tSystem.out.println(\"아래 상품메뉴판을 보시고 상품을 골라 입력해주세요.\\n\");\r\n\r\n\t\tSystem.out.println(\"[ Drinks MENU ]\");\r\n\t\tList<Item> drinkItems = menuContext.getMenuItems(\"Drinks\");\r\n\t\tprintMenuItems(drinkItems);\r\n\r\n\t\thandleMenuItemInput(drinkItems);\r\n\t}\r\n\r\n\tprivate static void displayBeerMenu() {\r\n\t\tSystem.out.println(\"SHAKESHACK BURGER 에 오신걸 환영합니다.\");\r\n\t\tSystem.out.println(\"아래 상품메뉴판을 보시고 상품을 골라 입력해주세요.\\n\");\r\n\r\n\t\tSystem.out.println(\"[ Beer MENU ]\");\r\n\t\tList<Item> beerItems = menuContext.getMenuItems(\"Beer\");\r\n\t\tprintMenuItems(beerItems);\r\n\r\n\t\thandleMenuItemInput(beerItems);\r\n\t}\r\n\r\n\tprivate static void displayConfirmation(Item menuItem) {\r\n\t\tSystem.out.println(menuItem.name + \"   | \" + menuItem.price + \" | \" + menuItem.description);\r\n\t\tSystem.out.println(\"위 메뉴를 장바구니에 추가하시겠습니까?\");\r\n\t\tSystem.out.println(\"1. 확인        2. 취소\");\r\n\r\n\t\thandleConfirmationInput(menuItem);\r\n\t}\r\n\r\n\tprivate static void handleConfirmationInput(Item menuItem) {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint input = scanner.nextInt();\r\n\t\tif (input == 1) {\r\n\t\t\tmenuContext.addToCart(menuItem);\r\n\t\t\tSystem.out.println(\"장바구니에 추가되었습니다.\");\r\n\t\t\tdisplayMainMenu();\r\n\t\t} else if (input == 2) {\r\n\t\t\tdisplayMainMenu();\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\thandleConfirmationInput(menuItem);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void displayOrderMenu() {\r\n\t\tSystem.out.println(\"아래와 같이 주문 하시겠습니까?\\n\");\r\n\t\tmenuContext.displayCart();\r\n\r\n\t\tSystem.out.println(\"[ Total ]\");\r\n\t\tSystem.out.println(\"W \" + menuContext.getTotalPrice() + \"\\n\");\r\n\t\tSystem.out.println(\"1. 주문      2. 메뉴판\");\r\n\r\n\t\thandleOrderMenuInput();\r\n\t}\r\n\r\n\tprivate static void handleOrderMenuInput() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint input = scanner.nextInt();\r\n\t\tif (input == 1) {\r\n\t\t\tdisplayOrderComplete();\r\n\t\t} else if (input == 2) {\r\n\t\t\tdisplayMainMenu();\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\thandleOrderMenuInput();\r\n\t\t}\r\n\t}\r\n\r\n\t// 주문시 요청 사항 입력받기\r\n\tprivate static void displayOrderComplete() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tSystem.out.println(\"주문시 요청사항 메시지 : \");\r\n\t\tString request = scanner.nextLine();\r\n\r\n\t\tint orderNumber = menuContext.generateOrderNumber();\r\n\t\tSystem.out.println(\"주문이 완료되었습니다!\\n\");\r\n\t\tSystem.out.println(\"대기번호는 [ \" + orderNumber + \" ] 번 입니다.\");\r\n\t\tsetWaitingOrder(request);\r\n\r\n\t\tresetCartAndDisplayMainMenu();\r\n\t}\r\n\r\n\t// 주문한 내역 대기 주문 리스트에 입력하기\r\n\tprivate static void setWaitingOrder(String request) {\r\n\t\tOrder order = new Order();\r\n\t\tDate now = new Date();\r\n\r\n\t\t// List의 깊은 복사\r\n\t\tList<Item> it = new ArrayList<>();\r\n\t\tfor(Item its : menuContext.getCart()){\r\n\t\t\tit.add(its);\r\n\t\t}\r\n\r\n\t\torder.setOrderItems(it);\r\n\t\torder.setTotalPrice(menuContext.getTotalPrice());\r\n\t\torder.setRequestContent(request); //요청 사항\r\n\t\torder.setOrderDate(now);\r\n\t\torder.generateOrderCnt();\r\n\t\torder.setOrderNum(menuContext.getOrderNumber());\r\n\t\tmenuContext.addToWaitingOrder(order);\r\n\t}// setWaitingOrder() of the end\r\n\r\n\tprivate static void resetCartAndDisplayMainMenu() {\r\n\t\tmenuContext.resetCart();\r\n\t\tSystem.out.println(\"(3초후 메뉴판으로 돌아갑니다.)\");\r\n\t\ttry {\r\n\t\t\tThread.sleep(3000); // 3초 대기\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tdisplayMainMenu();\r\n\t}\r\n\r\n\tprivate static void handleCancelMenuInput() {\r\n\t\tSystem.out.println(\"주문을 취소하시겠습니까?\");\r\n\t\tSystem.out.println(\"1. 확인        2. 취소\");\r\n\r\n\t\thandleCancelConfirmationInput();\r\n\t}\r\n\r\n\tprivate static void handleCancelConfirmationInput() {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint input = scanner.nextInt();\r\n\t\tif (input == 1) {\r\n\t\t\tmenuContext.resetCart();\r\n\t\t\tSystem.out.println(\"주문이 취소되었습니다.\");\r\n\t\t\tdisplayMainMenu();\r\n\t\t} else if (input == 2) {\r\n\t\t\tdisplayMainMenu();\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"잘못된 입력입니다. 다시 입력해주세요.\");\r\n\t\t\thandleCancelConfirmationInput();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ShakeShackBurgerApplication.java b/src/main/java/ShakeShackBurgerApplication.java
--- a/src/main/java/ShakeShackBurgerApplication.java	(revision edc85c3470fbd146aeb6b2cd60c11372f7a691c8)
+++ b/src/main/java/ShakeShackBurgerApplication.java	(date 1686121311123)
@@ -74,6 +74,7 @@
 		System.out.println("2. 완료주문 목록");
 		System.out.println("3. 상품 생성");
 		System.out.println("4. 상품 삭제");
+		System.out.println("5. 메인화면 되돌아가기");
 		System.out.println("항목을 선택하세요: ");
 
 		int input = scanner.nextInt();
@@ -89,6 +90,9 @@
 				break;
 			case 4:
 				deleteItem();
+				break;
+			case 5:
+				displayMainMenu();
 				break;
 			default:
 				System.out.println("잘못된 입력입니다. 다시 입력해주세요.");
@@ -149,8 +153,7 @@
 		Scanner scanner = new Scanner(System.in);
 		int input = scanner.nextInt();
 
-		if (input >= 1 && input <= orders.size()) {
-			input--;
+		if (input >= 1 && input <= orders.get(orders.size()-1).getOrderNum()) {
 			for(Order order : orders){
 				if(order.getOrderNum()==input){
 					Order selectedOrder = orders.get(input);
@@ -246,7 +249,23 @@
 
 	// 4. 상품 생성
 	private static void createItem() {
+		Scanner scanner = new Scanner(System.in);
+
+		System.out.println("새로운 상품 정보를 입력해주세요.");
+		System.out.print("메뉴: ");
+		String menu = scanner.nextLine();
+		System.out.print("이름: ");
+		String name = scanner.nextLine();
+		System.out.print("설명: ");
+		String description = scanner.nextLine();
+		System.out.print("가격: ");
+		int price = scanner.nextInt();
 
+		// 새로운 상품 생성
+		Menu newMenu = new Menu(menu, name, description, price);
+		menuContext.addMenu(newMenu);
+
+		System.out.println("새로운 상품이 생성되었습니다.");
 		displayMainMenu();
 	}
 
Index: .idea/runConfigurations.xml
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
deleted file mode 100644
--- a/.idea/runConfigurations.xml	(revision edc85c3470fbd146aeb6b2cd60c11372f7a691c8)
+++ /dev/null	(revision edc85c3470fbd146aeb6b2cd60c11372f7a691c8)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RunConfigurationProducerService">
-    <option name="ignoredProducers">
-      <set>
-        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
-      </set>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e9636530-f211-4ff0-b2d0-d87eeac22cbc\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Order.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Store.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Menu.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Menu.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ShakeShackBurgerApplication.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ShakeShackBurgerApplication.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QYO8x2Xdu4go4LYF3fC3vba5kf\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"ShakeShackBurgerApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ShakeShackBurgerApplication\" />\r\n      <module name=\"ShakeShackBurger.main\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.ShakeShackBurgerApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e9636530-f211-4ff0-b2d0-d87eeac22cbc\" name=\"Changes\" comment=\"\" />\r\n      <created>1685526892813</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685526892813</updated>\r\n      <workItem from=\"1685526894510\" duration=\"2409000\" />\r\n      <workItem from=\"1685927050919\" duration=\"3116000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision edc85c3470fbd146aeb6b2cd60c11372f7a691c8)
+++ b/.idea/workspace.xml	(date 1686121311493)
@@ -5,10 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e9636530-f211-4ff0-b2d0-d87eeac22cbc" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/src/main/java/Order.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Store.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/runConfigurations.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Menu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Menu.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/ShakeShackBurgerApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ShakeShackBurgerApplication.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -29,7 +27,33 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="edc85c3470fbd146aeb6b2cd60c11372f7a691c8" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="GitToolBoxStore">
+    <option name="recentBranches">
+      <RecentBranches>
+        <option name="branchesForRepo">
+          <list>
+            <RecentBranchesForRepo>
+              <option name="branches">
+                <list>
+                  <RecentBranch>
+                    <option name="branchName" value="main" />
+                    <option name="lastUsedInstant" value="1686117650" />
+                  </RecentBranch>
+                </list>
+              </option>
+              <option name="repositoryRootUrl" value="file://$PROJECT_DIR$" />
+            </RecentBranchesForRepo>
+          </list>
+        </option>
+      </RecentBranches>
+    </option>
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
@@ -40,13 +64,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">
-    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
-    <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
-  </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  }
+}</component>
   <component name="RunManager">
     <configuration name="ShakeShackBurgerApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="ShakeShackBurgerApplication" />
@@ -57,7 +84,7 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Application.ShakeShackBurgerApplication" />
+        <item itemvalue="애플리케이션.ShakeShackBurgerApplication" />
       </list>
     </recent_temporary>
   </component>
@@ -71,6 +98,9 @@
       <updated>1685526892813</updated>
       <workItem from="1685526894510" duration="2409000" />
       <workItem from="1685927050919" duration="3116000" />
+      <workItem from="1686101030191" duration="36000" />
+      <workItem from="1686117436718" duration="342000" />
+      <workItem from="1686117807005" duration="3271000" />
     </task>
     <servers />
   </component>
@@ -87,6 +117,5 @@
         </entry>
       </map>
     </option>
-    <option name="oldMeFiltersMigrated" value="true" />
   </component>
 </project>
\ No newline at end of file
